<?xml version="1.0"?>
<doc>
    <assembly>
        <name>blqw.Json</name>
    </assembly>
    <members>
        <member name="M:blqw.Json.ToObject``1(System.String)">
            <summary> 将json字符串转换为指定对象
            </summary>
        </member>
        <member name="M:blqw.Json.ToObject(System.Type,System.String)">
            <summary> 将json字符串转换为指定对象
            </summary>
        </member>
        <member name="T:blqw.JsonParser">
            <summary> 用于将Json字符串转换为C#对象
            </summary>
        </member>
        <member name="M:blqw.JsonParser.ToObject(System.Type,System.String)">
            <summary> 将json字符串转换为指定对象
            </summary>
        </member>
        <member name="M:blqw.JsonParser.FillObject(System.Object,System.String)">
            <summary> 将json字符串中的数据填充到指定对象
            </summary>
        </member>
        <member name="M:blqw.JsonParser.SkipValue(blqw.UnsafeJsonReader)">
            <summary> 跳过一个值
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:blqw.JsonParser.SkipKey(blqw.UnsafeJsonReader)">
            <summary> 跳过一个键
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:blqw.JsonParser.ReadKey(blqw.UnsafeJsonReader)">
            <summary> 获取一个键
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:blqw.JsonParser.ReadValue(blqw.UnsafeJsonReader,System.Type)">
            <summary> 读取一个值对象
            </summary>
            <param name="reader"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:blqw.JsonParser.ParseString(blqw.UnsafeJsonReader,System.Type)">
            <summary> 将字符串解析为指定类型
            </summary>
            <param name="str"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:blqw.JsonParser.ReadArray(blqw.UnsafeJsonReader,System.Type)">
            <summary> 读取数组
            </summary>
            <param name="reader"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:blqw.JsonParser.ReadObject(blqw.UnsafeJsonReader,System.Type)">
            <summary> 读取对象
            </summary>
            <param name="reader"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:blqw.QuickJsonBuilder">
            <summary> 快速的将任意对象转换为Json字符串
            </summary>
        </member>
        <member name="T:blqw.JsonBuilder">
            <summary> 用于将C#转换为Json字符串
            </summary>
        </member>
        <member name="F:blqw.JsonBuilder.Quot">
            <summary> "
            </summary>
        </member>
        <member name="F:blqw.JsonBuilder.Colon">
            <summary> :
            </summary>
        </member>
        <member name="F:blqw.JsonBuilder.Comma">
            <summary> ,
            </summary>
        </member>
        <member name="M:blqw.JsonBuilder.ToJsonString(System.Object)">
            <summary> 将对象转换为Json字符串
            </summary>
        </member>
        <member name="M:blqw.JsonBuilder.AppendObject(System.Object)">
            <summary> 将 任意对象 转换Json字符串写入Buffer
            </summary>
            <param name="obj">任意对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.UnsafeAppend(System.Char)">
            <summary> 非安全方式向Buffer追加一个字符(该方法不会验证字符的有效性)
            </summary>
            <param name="value">向Buffer追加的字符</param>
        </member>
        <member name="M:blqw.JsonBuilder.UnsafeAppend(System.String)">
            <summary> 非安全方式向Buffer追加一个字符串(该方法不会验证字符串的有效性)
            </summary>
            <param name="value">向Buffer追加的字符串</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendOther(System.Object)">
            <summary> 将未知对象按属性名和值转换为Json中的键值字符串写入Buffer
            </summary>
            <param name="obj">非null的位置对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendKey(System.String,System.Boolean)">
            <summary> 追加Key
            </summary>
            <param name="key"></param>
            <param name="escape">key中是否有(引号,回车,制表符等)特殊字符,需要转义</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendByte(System.Byte)">
            <summary> Byte 对象转换Json字符串写入Buffer
            </summary>
            <param name="value">Byte 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendDecimal(System.Decimal)">
            <summary> Decimal 对象转换Json字符串写入Buffer
            </summary>
            <param name="value">Decimal 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendInt16(System.Int16)">
            <summary> Int16 对象转换Json字符串写入Buffer
            </summary>
            <param name="value">Int16 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendInt32(System.Int32)">
            <summary> Int32 对象转换Json字符串写入Buffer
            </summary>
            <param name="value">Int32 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendInt64(System.Int64)">
            <summary> Int64 对象转换Json字符串写入Buffer
            </summary>
            <param name="value">Int64 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendSByte(System.SByte)">
            <summary> SByte 对象转换Json字符串写入Buffer
            </summary>
            <param name="value">SByte 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendUInt16(System.UInt16)">
            <summary> UInt16 对象转换Json字符串写入Buffer
            </summary>
            <param name="value">UInt16 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendUInt32(System.UInt32)">
            <summary> UInt32 对象转换Json字符串写入Buffer
            </summary>
            <param name="value">UInt32 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendUInt64(System.UInt64)">
            <summary> UInt64 对象转换Json字符串写入Buffer
            </summary>
            <param name="value">UInt64 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendDouble(System.Double)">
            <summary> Double 对象转换Json字符串写入Buffer
            </summary>
            <param name="value">Double 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendSingle(System.Single)">
            <summary> Single 对象转换Json字符串写入Buffer
            </summary>
            <param name="value">Single 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendBoolean(System.Boolean)">
            <summary> Boolean 对象转换Json字符串写入Buffer
            </summary>
            <param name="value">Boolean 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendChar(System.Char)">
            <summary> Char 对象转换Json字符串写入Buffer
            </summary>
            <param name="value">Char 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendString(System.String)">
            <summary> String 对象转换Json字符串写入Buffer
            </summary>
            <param name="value">Char 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendDateTime(System.DateTime)">
            <summary> DateTime 对象转换Json字符串写入Buffer
            </summary>
            <param name="value">DateTime 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendGuid(System.Guid)">
            <summary> Guid 对象转换Json字符串写入Buffer
            </summary>
            <param name="value">Guid 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendEnum(System.Enum)">
            <summary> 枚举 对象转换Json字符串写入Buffer
            </summary>
            <param name="value">枚举 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendNumber(System.IConvertible)">
            <summary> 数字 类型对象转换Json字符串写入Buffer
            </summary>
            <param name="number">数字对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendArray(System.Collections.IEnumerable)">
            <summary> 数组 对象转换Json中的数组字符串写入Buffer
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendJson(System.Collections.IDictionary)">
            <summary> 键值对 对象转换Json中的键值字符串写入Buffer
            </summary>
            <param name="dict">键值对 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendJson(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary> 键枚举 和 值枚举 转换Json中的键值字符串写入Buffer
            </summary>
            <param name="keys">键枚举</param>
            <param name="values">值枚举</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendArray(System.Collections.IEnumerable,System.Converter{System.Object,System.Object})">
            <summary> 将 对象枚举 和 值转换委托 转换Json中的数组字符串写入Buffer
            </summary>
            <param name="enumer">对象枚举</param>
            <param name="getVal">值转换委托</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendJson(System.Collections.IEnumerable,System.Converter{System.Object,System.String},System.Converter{System.Object,System.Object},System.Boolean)">
            <summary> 将 对象枚举 和 键/值转换委托 转换Json中的键值对象字符串写入Buffer
            </summary>
            <param name="enumer">对象枚举</param>
            <param name="getKey">键转换委托</param>
            <param name="getVal">值转换委托</param>
            <param name="escapekey">是否需要对Key进行转义</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendDataSet(System.Data.DataSet)">
            <summary> DataSet 对象转换Json字符串写入Buffer
            </summary>
            <param name="dataset">DataSet 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendDataTable(System.Data.DataTable)">
            <summary> DataTable 对象转换Json字符串写入Buffer
            </summary>
            <param name="table">DataTable 对象</param>
        </member>
        <member name="M:blqw.JsonBuilder.AppendDataView(System.Data.DataView)">
            <summary> DataView 对象转换Json字符串写入Buffer
            </summary>
            <param name="tableView">DataView 对象</param>
        </member>
        <member name="M:blqw.QuickJsonBuilder.AppendOther(System.Object)">
            <summary> 将未知对象按属性名和值转换为Json中的键值字符串写入Buffer
            </summary>
            <param name="obj">非null的位置对象</param>
        </member>
        <member name="F:blqw.UnsafeJsonReader.WordChars">
            <summary>
            <para>包含1: 可以为头的字符</para>
            <para>包含2: 可以为单词的字符</para>
            <para>包含4: 可以为数字的字符</para>
            <para>等于8: 空白字符</para>
            <para>包含16:转义字符</para>
            <para></para>
            </summary>
        </member>
        <member name="M:blqw.UnsafeJsonReader.IsEnd">
            <summary> 是否已经到结尾,忽略空白
            </summary>
        </member>
        <member name="M:blqw.UnsafeJsonReader.MoveNext">
            <summary> 移动到下一个字符,如果已经是结尾则抛出异常
            </summary>
        </member>
        <member name="M:blqw.UnsafeJsonReader.SkipWord">
            <summary> 跳过一个单词
            </summary>
        </member>
        <member name="M:blqw.UnsafeJsonReader.SkipChar(System.Char)">
            <summary> 跳过一个指定字符,忽略空白,如果字符串意外结束抛出异常
            </summary>
        </member>
        <member name="M:blqw.UnsafeJsonReader.SkipString">
            <summary> 跳过一个字符串
            </summary>
        </member>
        <member name="M:blqw.UnsafeJsonReader.ReadDateTime">
            <summary> 读取时间类型的对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:blqw.UnsafeJsonReader.GetDateTimeWord">
            <summary> 获取时间中的英文字符,返回127 = GMT, 大于0 表示月份, 小于0 表示星期
            </summary>
            <returns></returns>
        </member>
        <member name="M:blqw.UnsafeJsonReader.ReadPositiveInteger">
            <summary> 读取正整数,在ReadDateTime函数中使用
            </summary>
            <returns></returns>
        </member>
        <member name="M:blqw.UnsafeJsonReader.ReadConsts">
            <summary> 读取常量
            </summary>
            <returns></returns>
        </member>
        <member name="M:blqw.UnsafeJsonReader.ReadWord">
            <summary> 读取单词
            </summary>
            <returns></returns>
        </member>
        <member name="M:blqw.UnsafeJsonReader.ReadNumber">
            <summary> 读取数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:blqw.UnsafeJsonReader.ReadDecimal(System.Int32,System.Int32)">
            <summary> 读取小数
            </summary>
            <param name="index"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:blqw.UnsafeJsonReader.ReadInteger(System.Int32,System.Int32)">
            <summary> 读取整数
            </summary>
            <param name="index"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:blqw.UnsafeJsonReader.ReadString">
            <summary> 读取字符串
            </summary>
        </member>
        <member name="P:blqw.UnsafeJsonReader.Position">
            <summary> 当前位置
            </summary>
        </member>
        <member name="T:blqw.UnsafeStringWriter">
            <summary> 以非安全方式访问指针操作字符串直接写入内存,以提高字符串拼接效率
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.#ctor">
            <summary> 新建 以非安全方式访问指针操作字符串直接写入内存的 对象
            </summary>
        </member>
        <member name="F:blqw.UnsafeStringWriter.p">
            <summary> 一级缓冲指针
            </summary>
        </member>
        <member name="F:blqw.UnsafeStringWriter._Buffer">
            <summary> 二级缓冲
            </summary>
        </member>
        <member name="F:blqw.UnsafeStringWriter._BufferIndex">
            <summary> 备用二级缓冲索引
            </summary>
        </member>
        <member name="F:blqw.UnsafeStringWriter._Length">
            <summary> 总字符数
            </summary>
        </member>
        <member name="F:blqw.UnsafeStringWriter._EndPosition">
            <summary> 结束位,一级缓冲长度减一
            </summary>
        </member>
        <member name="F:blqw.UnsafeStringWriter._Position">
            <summary> 以及缓冲当前位置
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.TryWrite">
            <summary> 尝试在一级缓冲区写入一个字符
            <para>如果一级缓冲区已满,将会自动调用Flush方法转移一级缓冲区中的内容</para>
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.TryWrite(System.Int32)">
            <summary> 尝试在一级缓冲区写入指定数量的字符
            </summary>
            <para>如果尝试写入的字符数大于一级缓冲区的大小,返回false</para>
            <para>如果尝试写入的字符数超出一级缓冲区剩余容量,自动调用Flush方法</para>
            <param name="count">尝试写入的字符数</param>
            <returns></returns>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Append(System.Boolean)">
            <summary> 将 Boolean 对象转换为字符串追加到当前实例。
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Append(System.DateTime)">
            <summary> 将 DateTime 对象转换为字符串追加到当前实例。
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Append(System.Guid)">
            <summary> 将 Guid 对象转换为字符串追加到当前实例。
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Append(System.Decimal)">
            <summary> 将 Decimal 对象转换为字符串追加到当前实例。
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Append(System.Double)">
            <summary> 将 Double 对象转换为字符串追加到当前实例。
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Append(System.Single)">
            <summary> 将 Single 对象转换为字符串追加到当前实例。
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Append(System.SByte)">
            <summary> 将 SByte 对象转换为字符串追加到当前实例。
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Append(System.Int16)">
            <summary> 将 Int16 对象转换为字符串追加到当前实例。
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Append(System.Int32)">
            <summary> 将 Int32 对象转换为字符串追加到当前实例。
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Append(System.Int64)">
            <summary> 将 Int64 对象转换为字符串追加到当前实例。
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Append(System.Char)">
            <summary> 将 Char 对象转换为字符串追加到当前实例。
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Append(System.Byte)">
            <summary> 将 Byte 对象转换为字符串追加到当前实例。
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Append(System.UInt16)">
            <summary> 将 UInt16 对象转换为字符串追加到当前实例。
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Append(System.UInt32)">
            <summary> 将 UInt32 对象转换为字符串追加到当前实例。
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Append(System.UInt64)">
            <summary> 将 UInt64 对象转换为字符串追加到当前实例。
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Append(System.String)">
            <summary> 将字符串追加到当前实例。
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Append(System.Char*,System.Int32,System.Int32)">
            <summary> 将内存中的字符串追加到当前实例。
            </summary>
            <param name="point">内存指针</param>
            <param name="offset">指针偏移量</param>
            <param name="length">字符长度</param>
            <returns></returns>
        </member>
        <member name="M:blqw.UnsafeStringWriter.AppendFormat(System.IFormattable,System.String)">
            <summary> 将可格式化对象,按指定的格式转换为字符串追加到当前实例。
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Ready(System.Char*,System.UInt16)">
            <summary> 由于调用对象将内存指针固定后,通知当前实例指针准备就绪
            </summary>
            <param name="point">内存指针</param>
            <param name="length">一级缓冲长度0~65536</param>
            <returns></returns>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Close">
            <summary> 关闭当前实例
            <para>
            该行为将清空所有缓冲区中的内容,
            并阻止除Ready,Close以外的方法调用,直到再次调用Ready方法
            </para>
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.Flush">
            <summary> 清理当前实例的一级缓冲区的内容，使所有缓冲数据写入二级缓冲区。
            </summary>
        </member>
        <member name="M:blqw.UnsafeStringWriter.ToString">
            <summary> 返回当前实例中的字符串
            </summary>
        </member>
        <member name="P:blqw.UnsafeStringWriter.Length">
            <summary> 获取当前实例中的字符串总长度
            </summary>
        </member>
        <member name="P:blqw.UnsafeStringWriter.DebugInfo">
            <summary> 在调试器的变量窗口中的显示的信息
            </summary>
        </member>
    </members>
</doc>
